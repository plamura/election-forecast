import matplotlib.pyplot as plt
polls={}
polls[0]=float(31/120)
polls[1]=float(9/120)
polls[2]=float(6/120)
polls[3]=float(11/120)
polls[4]=float(4/120)
polls[5]=float(4/120)
polls[6]=float(5/120)
polls[7]=float(6/120)
polls[8]=float(5/120)
polls[9]=float(6/120)
polls[10]=float(8/120)
polls[11]=float(6/120)
polls[12]=float(4/120)
polls[13]=float(15/120)

P=0
for i in range(len(polls)):
    P += polls[i]

        # Computing seats, Shapley values and all winning coalitions
parties=['A','B','C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N']                      # Initialize parties and coalitions (labelled by letters)
labels = ['Li', 'La','JL','YA + Ha','Ku', 'JH', 'Sh', 'UTJ', 'YB', 'Me', 'NR', 'Ta', 'Ge', 'HY']

colors = ['royalblue','red', 'black', 'dodgerblue', 'deepskyblue', 'chartreuse', 'gray', 'steelblue', 'cadetblue', 'mediumseagreen', 'lightskyblue', 'yellow', 'royalblue', 'olive']

label = dict(zip(parties,labels))  
color = dict(zip(parties,colors))
coalitions = powerset(parties)


s ={}                                                     # Initialize proportions of seats (precise and rounded)    
sround = {}    
pl = {} 
i = 0  
for p in parties:
    pl[p]=polls[i]
    s[p] = polls[i]/P
    sround[p]= round(float(s[p]*100),1)
    i+=1


                             # Introduce campaign commitments
friends={}
friends['A']='A', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'N'
friends['B']='B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N'
friends['C']='B', 'C', 'D', 'E', 'J', 'L', 'M', 'N'
friends['D']='A','B', 'C', 'D', 'E', 'I', 'j', 'K', 'L', 'M', 'N'
friends['E']='A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N'
friends['F']='A','B', 'E', 'F', 'G', 'H', 'K', 'M', 'N'
friends['G']='A','B', 'E', 'F', 'G', 'H', 'K', 'M', 'N'
friends['H']='A','B', 'E', 'F', 'G', 'H', 'K', 'M', 'N'
friends['I']='A','B', 'D', 'E', 'I', 'J', 'K', 'M', 'N'
friends['J']='B', 'C', 'D', 'E', 'I', 'J', 'K', 'L', 'M', 'N'
friends['K']='A','B', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'M', 'N'
friends['L']='B', 'C', 'D', 'E', 'J', 'L', 'M', 'N'
friends['M']='B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N'
friends['N']='A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N'

worth = {}                                           # Assign worth to coalitions
for i in tuple(coalitions):
    sumsp=0
    for r in tuple(i):
        j=set(i).intersection(set(friends[r]))
        if j==set(i):
            sumsp = sumsp +  s[r]
    worth[tuple(i)] = ( sign(sumsp - 0.5) + 1)/2
    if ( sign(sumsp - 0.5) + 1)==1:
        worth[tuple(i)] = 0
letter_game = CooperativeGame(worth)
sh = letter_game.shapley_value()
show( "{:<10} {:<10} {:<10} {:<10} {:<10}".format('Label', 'Party', 'Votes (%)', 'Seats (%)', 'Strength') )
for k in parties:
    lb = label[k]
    num = sround[k]
    v = max(sh[k],0)
    show( "{:<10} {:<10} {:<10} {:<10} {:<10}".format(k, lb, round(float(pl[k]),2), num, v) )    
letter_function= worth
for k in letter_function.keys():            # Find all winning coalitions
    if letter_function[k] == 0:
        del letter_function[k]
        # Find all minimal winning coalitions
for k in letter_function.keys():
    for j in letter_function.keys():
        if (j<> k) and (set(k).intersection(set(j)) == set(k)):
            del letter_function[j]

            # Find all stable coalitions

t=0
plt.figure(t)                
chi = {}
power = {}
for k in letter_function.keys():
    S = 0
    for j in k:
        sh[j] = max(sh[j],0)
        S += sh[j]
    chi[k] = letter_function[k]/S
    u=''
    po=''
    pc=''
    b = 0
    for j in k:
        po=''
        pc=''
        power[j] = sh[j]*chi[k]
        if power[j]==0:
            po='('
            pc=')'
        u = u + po + label[j].split('/')[0] + pc + ' '  
    for i in k:
        plt.bar(u, power[i], bottom = b, color = color[i])
        b = b +power[i]
    plt.bar(u, 0.03, bottom=chi[k]/600, color='white', width=.2) 
show('Minimal winning coalitions and Power distribution') 
show('( Power = Strength x Stability ):')            

plt.xticks(rotation=-20, fontsize=8)
plt.show()

show('Minimal winning coalitions and Stability coefficients') 
show('( Stability = 1 / Sum(Strength) ):')

show(chi)

S = 0    
for k in letter_function.keys():
    if chi[k] > S:
        S = chi[k]
for k in chi.keys():
        if chi[k] != S:
            del letter_function[k]
show('Stable coalitions and Power distribution') 
show('( Power = Strength x Stability ):')            
for k in chi.keys():
    power={}
    for i in tuple(k):
        power[i] = chi[k]*sh[i]
    show(k, power)
